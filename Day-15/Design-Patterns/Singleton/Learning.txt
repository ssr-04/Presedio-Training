Singleton is a creational design pattern that lets you ensure that a class has only one instance, while providing a global access point to this instance.
(https://refactoring.guru/design-patterns/singleton)

Why:
The Singleton pattern solves two problems at the same time:
- Ensure that a class has just a single instance.
- Provide a global access point to that instance.

Solution (how ?):
- Make the default constructor private, to prevent other objects from using the new operator with the Singleton class.
- Create a static creation method that acts as a constructor. Under the hood, this method calls the private constructor to create an object and saves it in a static field. All following calls to this method return the cached object.

If your code has access to the Singleton class, then it’s able to call the Singleton’s static method. So whenever that method is called, the same object is always returned.

Steps:
- Add a private static field to the class for storing the singleton instance.
- Declare a public static creation method for getting the singleton instance.
- Implement “lazy initialization” inside the static method. It should create a new object on its first call and put it into the static field. The method should always return that instance on all subsequent calls.
- Make the constructor of the class private. The static method of the class will still be able to call the constructor, but not the other objects.
- Go over the client code and replace all direct calls to the singleton’s constructor with calls to its static creation method.

--------------------------------------------------------------------------------------

The Singleton Design Pattern
Intent:
Ensure a class has only one instance, and provide a global point of access to that instance.

Why use it?

- Controlled Access to a Single Instance: When exactly one object is needed to coordinate actions across the system. Examples include:
* A single configuration manager.
* A single logger for the entire application.
* A single database connection pool.
* A single print spooler.

- Resource Management: To control access to a shared resource (like a file or a database connection) or to limit the number of objects created for performance reasons.

Key Characteristics of a Singleton Implementation:
- Private Constructor: Prevents direct instantiation of the class from outside.
- Private Static Instance: Holds the single instance of the class.
- Public Static Method/Property: Provides the global access point to the single instance.
-----------------------------------------------------------------------------------------
There are 
- Eager singleton
- Lazy singleton
which ensures thread safe without explicit locking, 
Eager - by initalizing the static instance during the start of the program.
Lazy - during the first call to it.
----------------------------------------------------------------------------------------



